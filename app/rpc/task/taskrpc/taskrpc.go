// Code generated by goctl. DO NOT EDIT.
// Source: task.proto

package taskrpc

import (
	"context"

	"go-rpc-todo-list_/app/rpc/task/types/task"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateTaskReq  = task.CreateTaskReq
	CreateTaskResp = task.CreateTaskResp
	TaskInfoReq    = task.TaskInfoReq
	TaskInfoResp   = task.TaskInfoResp

	TaskRPC interface {
		CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskResp, error)
		GetTaskInfo(ctx context.Context, in *TaskInfoReq, opts ...grpc.CallOption) (*TaskInfoResp, error)
	}

	defaultTaskRPC struct {
		cli zrpc.Client
	}
)

func NewTaskRPC(cli zrpc.Client) TaskRPC {
	return &defaultTaskRPC{
		cli: cli,
	}
}

func (m *defaultTaskRPC) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskResp, error) {
	client := task.NewTaskRPCClient(m.cli.Conn())
	return client.CreateTask(ctx, in, opts...)
}

func (m *defaultTaskRPC) GetTaskInfo(ctx context.Context, in *TaskInfoReq, opts ...grpc.CallOption) (*TaskInfoResp, error) {
	client := task.NewTaskRPCClient(m.cli.Conn())
	return client.GetTaskInfo(ctx, in, opts...)
}
