// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: authentication.proto

package authentication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthRPC_Authentication_FullMethodName = "/authentication.AuthRPC/Authentication"
)

// AuthRPCClient is the client API for AuthRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthRPCClient interface {
	Authentication(ctx context.Context, in *AuthenticationReq, opts ...grpc.CallOption) (*AuthenticationResp, error)
}

type authRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthRPCClient(cc grpc.ClientConnInterface) AuthRPCClient {
	return &authRPCClient{cc}
}

func (c *authRPCClient) Authentication(ctx context.Context, in *AuthenticationReq, opts ...grpc.CallOption) (*AuthenticationResp, error) {
	out := new(AuthenticationResp)
	err := c.cc.Invoke(ctx, AuthRPC_Authentication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthRPCServer is the server API for AuthRPC service.
// All implementations must embed UnimplementedAuthRPCServer
// for forward compatibility
type AuthRPCServer interface {
	Authentication(context.Context, *AuthenticationReq) (*AuthenticationResp, error)
	mustEmbedUnimplementedAuthRPCServer()
}

// UnimplementedAuthRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAuthRPCServer struct {
}

func (UnimplementedAuthRPCServer) Authentication(context.Context, *AuthenticationReq) (*AuthenticationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authentication not implemented")
}
func (UnimplementedAuthRPCServer) mustEmbedUnimplementedAuthRPCServer() {}

// UnsafeAuthRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthRPCServer will
// result in compilation errors.
type UnsafeAuthRPCServer interface {
	mustEmbedUnimplementedAuthRPCServer()
}

func RegisterAuthRPCServer(s grpc.ServiceRegistrar, srv AuthRPCServer) {
	s.RegisterService(&AuthRPC_ServiceDesc, srv)
}

func _AuthRPC_Authentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).Authentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRPC_Authentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).Authentication(ctx, req.(*AuthenticationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthRPC_ServiceDesc is the grpc.ServiceDesc for AuthRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authentication.AuthRPC",
	HandlerType: (*AuthRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authentication",
			Handler:    _AuthRPC_Authentication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication.proto",
}
