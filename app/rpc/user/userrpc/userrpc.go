// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userrpc

import (
	"context"

	"go-rpc-todo-list_/app/rpc/user/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateUserReq  = user.CreateUserReq
	CreateUserResp = user.CreateUserResp
	UserInfoReq    = user.UserInfoReq
	UserInfoResp   = user.UserInfoResp

	UserRPC interface {
		CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
		GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	}

	defaultUserRPC struct {
		cli zrpc.Client
	}
)

func NewUserRPC(cli zrpc.Client) UserRPC {
	return &defaultUserRPC{
		cli: cli,
	}
}

func (m *defaultUserRPC) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	client := user.NewUserRPCClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUserRPC) GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := user.NewUserRPCClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}
